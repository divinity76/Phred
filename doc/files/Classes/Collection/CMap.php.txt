<?php


/**
 * The hub for static methods that take care of instances of the PHP's associative array, which is also known as CMap.
 *
 * **In the OOP mode, you would likely never need to use this class.**
 *
 * *The [PHP's associative array](http://www.php.net/arrays) is called CMap to avoid any confusion with the regular
 * array, which is kindly represented by the SplFixedArray class.*
 *
 * What a CMap does is that it contains arbitrary values associated with keys by which those values can be found. The
 * keys are unique within a CMap. This is effectively the same what objects do in JavaScript.
 *
 * As imposed by PHP, the type of a key in an associative array can be either `string` or `int`. When a string that is
 * going to be used as a key looks like an integer, it's actually converted into the corresponding integer and used as
 * such to access the value (except if the string begins with one or more "0"). A value of type `float`, `bool`, or
 * `null` is converted into an integer too when trying to use it for a key. A key cannot be an empty string in a PHP's
 * associative array, and any empty string becomes "_" from the CMap's point of view when trying to use it as a key.
 *
 * Similar to regular arrays, you can access a value in a CMap or insert a new key-value pair with `[ ]` notation,
 * putting the key with which the value is associated between the brackets. With `valueByPath` and `setValueByPath`
 * methods, you can also access a value in a multi-dimensional (or one-dimensional) CMap by its key path, which is a
 * string hierarchically indicating the keys following which the value can be found, chained together with "."
 * separator, as in "level1key.level2key". The `merge` method is proud of being able to merge maps in the *correct*
 * way.
 */

// Method signatures:
//   static CMap make ()
//   static CMap makeCopy ($map)
//   static int length ($map)
//   static bool isEmpty ($map)
//   static bool equals ($map, $toMap, $comparator = CComparator::EQUALITY)
//   static int compare ($map, $toMap, $comparator = CComparator::ORDER_ASC)
//   static bool hasKey ($map, $key)
//   static bool hasPath ($map, $path)
//   static mixed valueByPath ($map, $path)
//   static void setValueByPath (&$map, $path, $value)
//   static bool find ($map, $whatValue, $comparator = CComparator::EQUALITY, &$foundUnderKey = null)
//   static bool findScalar ($map, $whatValue, &$foundUnderKey = null)
//   static int countValue ($map, $value, $comparator = CComparator::EQUALITY)
//   static void remove (&$map, $key)
//   static CMap filter ($map, $filter)
//   static CArray keys ($map)
//   static CArray values ($map)
//   static CMap merge (/*map, withMap0, withMap1, ...*/)
//   static bool areKeysSequential ($map)
//   static void insertValue (&$map, $value)

class CMap extends CRootClass implements ICopyingStatic, IEqualityAndOrderStatic
{
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Creates and returns an empty PHP's associative array (called CMap).
     *
     * @return CMap The new map.
     */

    public static function make ()
    {
        return [];
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Makes a copy of a map.
     *
     * This method exists to mirror the same-named method of the CArray class.
     *
     * @param  map $map The map to be copied.
     *
     * @return CMap A copy of the map.
     */

    public static function makeCopy ($map)
    {
        assert( 'is_cmap($map)', vs(isset($this), get_defined_vars()) );

        $map = parray($map);

        return $map;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Tells how many key-value pairs there are in a map.
     *
     * @param  map $map The map to be looked into.
     *
     * @return int The length of the map.
     */

    public static function length ($map)
    {
        assert( 'is_cmap($map)', vs(isset($this), get_defined_vars()) );

        $map = parray($map);

        return count($map);
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Determines if a map is empty.
     *
     * @param  map $map The map to be looked into.
     *
     * @return bool `true` if the map is empty, `false` otherwise.
     */

    public static function isEmpty ($map)
    {
        assert( 'is_cmap($map)', vs(isset($this), get_defined_vars()) );

        $map = parray($map);

        return ( count($map) == 0 );
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Determines if two maps are equal.
     *
     * For any two maps to be equal, they need to have the same key-value pairs.
     *
     * You can use your own comparator for the comparison of the values in the maps, but the default comparator has got
     * you covered when comparing scalar values, such as `string`, `int`, `float`, and `bool`. And the default
     * comparator is smart enough to know how to compare objects of those classes that conform to the IEquality or
     * IEqualityAndOrder interface (static or not), including CArray and CMap. See the [CComparator](CComparator.html)
     * class for more on this.
     *
     * @param  map $map The first map for comparison.
     * @param  map $toMap The second map for comparison.
     * @param  callable $comparator **OPTIONAL. Default is** `CComparator::EQUALITY`. The function or method to be
     * used for the comparison of any two values. If this parameter is provided, the comparator should take two
     * parameters, with the first parameter being a value from the first map and the second parameter being a value
     * from the second map, and return `true` if the two values are equal and `false` otherwise.
     *
     * @return bool `true` if the two maps are equal, `false` otherwise.
     *
     * @link   CComparator.html CComparator
     */

    public static function equals ($map, $toMap, $comparator = CComparator::EQUALITY)
    {
        assert( 'is_cmap($map) && is_cmap($toMap)', vs(isset($this), get_defined_vars()) );

        $map = parray($map);
        $toMap = parray($toMap);

        // Compare the keys.
        $keys = array_keys($map);
        $toKeys = array_keys($toMap);
        if ( count($keys) != count($toKeys) )
        {
            return false;
        }
        for ($i = 0; $i < count($keys); $i++)
        {
            if ( $keys[$i] !== $toKeys[$i] )
            {
                return false;
            }
        }

        // Compare the values. The quantities should match at this point.
        $values = array_values($map);
        $toValues = array_values($toMap);
        for ($i = 0; $i < count($values); $i++)
        {
            if ( !call_user_func($comparator, $values[$i], $toValues[$i]) )
            {
                return false;
            }
        }

        return true;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Determines the order in which two maps should appear in a place where it matters.
     *
     * You can use your own comparator for the comparison of the values in the maps, but the default comparator has got
     * you covered when comparing scalar values, such as `string`, `int`, `float`, and `bool` in the ascending order or
     * in the descending order if you use `CComparator::ORDER_DESC`. And the default comparator is smart enough to know
     * how to compare objects of those classes that conform to the IEqualityAndOrder interface (static or not),
     * including CArray and CMap. See the [CComparator](CComparator.html) class for more on this.
     *
     * @param  map $map The first map for comparison.
     * @param  map $toMap The second map for comparison.
     * @param  callable $comparator **OPTIONAL. Default is** `CComparator::ORDER_ASC`. The function or method to be
     * used for the comparison of any two values. If this parameter is provided, the comparator should take two
     * parameters, with the first parameter being a value from the first map and the second parameter being a value
     * from the second map, and return `-1` if the value from the first map would need to go before the value from the
     * second map if the two were being ordered in separate, `1` if the other way around, and `0` if the two values are
     * equal.
     *
     * @return int A negative value (typically `-1`) if the first map should go before the second map, a positive value
     * (typically `1`) if the other way around, and `0` if the two maps are equal.
     *
     * @link   CComparator.html CComparator
     */

    public static function compare ($map, $toMap, $comparator = CComparator::ORDER_ASC)
    {
        assert( 'is_cmap($map) && is_cmap($toMap)', vs(isset($this), get_defined_vars()) );

        $map = parray($map);
        $toMap = parray($toMap);

        // Compare the keys.
        $keys = array_keys($map);
        $toKeys = array_keys($toMap);
        if ( count($keys) != count($toKeys) )
        {
            return CMathi::sign(count($keys) - count($toKeys));
        }
        for ($i = 0; $i < count($keys); $i++)
        {
            if ( $keys[$i] !== $toKeys[$i] )
            {
                return ( $keys[$i] < $toKeys[$i] ) ? -1 : 1;
            }
        }

        // Compare the values. The quantities should match at this point.
        $values = array_values($map);
        $toValues = array_values($toMap);
        for ($i = 0; $i < count($values); $i++)
        {
            $compRes = call_user_func($comparator, $values[$i], $toValues[$i]);
            if ( $compRes != 0 )
            {
                return $compRes;
            }
        }

        return 0;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Determines if a map contains a value under a specified key.
     *
     * @param  map $map The map to be looked into.
     * @param  mixed $key The key to be looked for.
     *
     * @return bool `true` if the map contains a value under such key, `false` otherwise.
     */

    public static function hasKey ($map, $key)
    {
        assert( 'is_cmap($map)', vs(isset($this), get_defined_vars()) );

        $map = parray($map);

        return array_key_exists($key, $map);
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Determines if a map contains a value by a specified key path.
     *
     * @param  map $map The map to be looked into.
     * @param  string $path The key path to be looked by, e.g. "level1key.level2key".
     *
     * @return bool `true` if the map contains a value by such key path, `false` otherwise.
     */

    public static function hasPath ($map, $path)
    {
        assert( 'is_cmap($map) && is_cstring($path)', vs(isset($this), get_defined_vars()) );

        $pathComps = explode(".", $path);
        $numLevels = count($pathComps) - 1;
        $currMap = parray($map);
        for ($i = 0; $i < $numLevels; $i++)
        {
            $comp = $pathComps[$i];
            if ( !array_key_exists($comp, $currMap) )
            {
                return false;
            }
            $currMap = $currMap[$comp];
            if ( !is_cmap($currMap) )
            {
                return false;
            }
            $currMap = parray($currMap);
        }
        return array_key_exists($pathComps[$numLevels], $currMap);
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * From a map, returns the value found by a specified key path.
     *
     * @param  map $map The map to be looked into.
     * @param  string $path The key path by which the value is to be found, e.g. "level1key.level2key".
     *
     * @return mixed The value found by the key path.
     */

    public static function valueByPath ($map, $path)
    {
        assert( 'is_cmap($map) && is_cstring($path)', vs(isset($this), get_defined_vars()) );

        $pathComps = explode(".", $path);
        $numLevels = count($pathComps) - 1;
        $currMap = parray($map);
        for ($i = 0; $i < $numLevels; $i++)
        {
            $currMap = $currMap[$pathComps[$i]];
            assert( 'is_cmap($currMap)', vs(isset($this), get_defined_vars()) );
            $currMap = parray($currMap);
        }
        return $currMap[$pathComps[$numLevels]];
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * In a map, modifies the value found by a specified key path.
     *
     * @param  map $map The map to be modified.
     * @param  string $path The key path by which the value is to be found, e.g. "level1key.level2key".
     * @param  mixed $value The new value.
     *
     * @return void
     */

    public static function setValueByPath (&$map, $path, $value)
    {
        assert( 'is_cmap($map) && is_cstring($path)', vs(isset($this), get_defined_vars()) );

        $pathComps = explode(".", $path);
        $numLevels = count($pathComps) - 1;
        $currMap = &$map;
        if ( !is_array($currMap) )
        {
            // CMapObject
            $currMap = &$currMap->toPArray();
        }
        for ($i = 0; $i < $numLevels; $i++)
        {
            $currMap = &$currMap[$pathComps[$i]];
            if ( !is_array($currMap) )
            {
                // CMapObject
                $currMap = &$currMap->toPArray();
            }
            assert( 'is_cmap($currMap)', vs(isset($this), get_defined_vars()) );
        }
        $currMap[$pathComps[$numLevels]] = $value;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Determines if a map contains a specified value.
     *
     * You can use your own comparator for the search, but the default comparator has got you covered when searching
     * for scalar values, such as `string`, `int`, `float`, and `bool`. And the default comparator is smart enough to
     * know how to compare objects of those classes that conform to the IEquality or IEqualityAndOrder interface
     * (static or not), including CArray and CMap. See the [CComparator](CComparator.html) class for more on this.
     *
     * @param  map $map The map to be looked into.
     * @param  mixed $whatValue The searched value.
     * @param  callable $comparator **OPTIONAL. Default is** `CComparator::EQUALITY`. The function or method to be
     * used for the comparison of values while searching. If this parameter is provided, the comparator should take two
     * parameters, with the first parameter being a value from the map and the second parameter being the searched
     * value, and return `true` if the two values are equal and `false` otherwise.
     * @param  reference $foundUnderKey **OPTIONAL. OUTPUT.** If a value has been found after the method was called
     * with this parameter provided, the parameter's value is being the first key under which the value was seen.
     *
     * @return bool `true` if such value was found in the map, `false` otherwise.
     *
     * @link   CComparator.html CComparator
     */

    public static function find ($map, $whatValue, $comparator = CComparator::EQUALITY, &$foundUnderKey = null)
    {
        assert( 'is_cmap($map) && is_callable($comparator)', vs(isset($this), get_defined_vars()) );

        $map = parray($map);

        foreach ($map as $mapKey => $mapValue)
        {
            if ( call_user_func($comparator, $mapValue, $whatValue) )
            {
                $foundUnderKey = $mapKey;
                return true;
            }
        }
        return false;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Determines if a map contains a specified scalar value.
     *
     * If a map only contains values of scalar types i.e. `int`, `float`, `bool`, `string` (ASCII only), or `null`,
     * this method allows for faster searches compared to `find` method. In case of `string` type, the search is
     * case-sensitive.
     *
     * @param  map $map The map to be looked into.
     * @param  mixed $whatValue The searched value.
     * @param  reference $foundUnderKey **OPTIONAL. OUTPUT.** If a value has been found after the method was called
     * with this parameter provided, the parameter's value is being the first key under which the value was seen.
     *
     * @return bool `true` if such value was found in the map, `false` otherwise.
     *
     * @link   #method_find find
     */

    public static function findScalar ($map, $whatValue, &$foundUnderKey = null)
    {
        assert( 'is_cmap($map) && (is_scalar($whatValue) || is_null($whatValue))',
            vs(isset($this), get_defined_vars()) );

        $map = parray($map);

        $res = array_search($whatValue, $map, true);
        if ( $res !== false )
        {
            $foundUnderKey = $res;
            return true;
        }
        else
        {
            return false;
        }
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Tells how many occurrences of a specified value there are in a map.
     *
     * You can use your own comparator for the search, but the default comparator has got you covered when searching
     * for scalar values, such as `string`, `int`, `float`, and `bool`. And the default comparator is smart enough to
     * know how to compare objects of those classes that conform to the IEquality or IEqualityAndOrder interface
     * (static or not), including CArray and CMap. See the [CComparator](CComparator.html) class for more on this.
     *
     * @param  map $map The map to be looked into.
     * @param  mixed $value The searched value.
     * @param  callable $comparator **OPTIONAL. Default is** `CComparator::EQUALITY`. The function or method to be
     * used for the comparison of values while searching. If this parameter is provided, the comparator should take two
     * parameters, with the first parameter being a value from the map and the second parameter being the searched
     * value, and return `true` if the two values are equal and `false` otherwise.
     *
     * @return int The number of such values in the map.
     *
     * @link   CComparator.html CComparator
     */

    public static function countValue ($map, $value, $comparator = CComparator::EQUALITY)
    {
        assert( 'is_cmap($map) && is_callable($comparator)', vs(isset($this), get_defined_vars()) );

        $map = parray($map);

        $count = 0;
        foreach ($map as $mapValue)
        {
            if ( call_user_func($comparator, $mapValue, $value) )
            {
                $count++;
            }
        }
        return $count;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Removes a key-value pair from a map.
     *
     * @param  map $map The map to be modified.
     * @param  mixed $key The key of the key-value pair to be removed.
     *
     * @return void
     */

    public static function remove (&$map, $key)
    {
        assert( 'is_cmap($map)', vs(isset($this), get_defined_vars()) );
        assert( 'self::hasKey($map, $key)', vs(isset($this), get_defined_vars()) );

        if ( is_array($map) )
        {
            unset($map[$key]);
        }
        else  // CMapObject
        {
            $pArray = &$map->toPArray();
            unset($pArray[$key]);
        }
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Filters the key-value pairs in a map by calling a function or method on each value and returns a new map with
     * only those key-value pairs that were let through by the filter.
     *
     * The input map is not modified by this method.
     *
     * @param  map $map The map to be filtered.
     * @param  callable $filter The function or method to be used for filtering. The filter should take a value as a
     * parameter and return `true` if the corresponding key-value pair should make its way into the resulting map and
     * `false` if not.
     *
     * @return CMap The filtered map.
     */

    public static function filter ($map, $filter)
    {
        assert( 'is_cmap($map) && is_callable($filter)', vs(isset($this), get_defined_vars()) );

        $map = parray($map);

        return array_filter($map, $filter);
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Extracts and returns the keys from a map, as an array.
     *
     * @param  map $map The map to be looked into.
     *
     * @return CArray The map's keys.
     */

    public static function keys ($map)
    {
        assert( 'is_cmap($map)', vs(isset($this), get_defined_vars()) );

        $map = parray($map);

        return CArray::fromPArray(array_keys($map));
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Extracts and returns the values from a map, as an array.
     *
     * @param  map $map The map to be looked into.
     *
     * @return CArray The map's values.
     */

    public static function values ($map)
    {
        assert( 'is_cmap($map)', vs(isset($this), get_defined_vars()) );
        return CArray::fromPArray($map);
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Merges two or more maps together and returns the new map.
     *
     * The maps that need to be merged are passed as arguments to this method. The order in which the maps are passed
     * determines the order in which values are overridden for matching keys, if any.
     *
     * Different from the PHP's `array_merge` function, maps with this method get merged like you would expect them to.
     * Whether it's a string key or a numeric one, its value is overridden by the value of an equal key if such key is
     * present in any of the subsequent maps, regardless of the level at which the map is located if the source maps
     * are multi-dimensional and contain deeper maps stored under equal keys. And new key-value pairs are added by
     * subsequent maps to the resulting map for any map that did not have them before, no matter how deep the map is
     * located in the map hierarchy as long as the maps' keys match at that level.
     *
     * None of the source maps is modified by this method.
     *
     * @return CMap The resulting map.
     */

    public static function merge (/*map, withMap0, withMap1, ...*/)
    {
        $funcNumArgs = func_num_args();
        assert( '$funcNumArgs >= 2', vs(isset($this), get_defined_vars()) );

        $resMap = self::make();
        $arguments = func_get_args();
        foreach ($arguments as $map)
        {
            assert( 'is_cmap($map)', vs(isset($this), get_defined_vars()) );
            self::recurseMergingMaps($resMap, $map);
        }
        return $resMap;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Determines if the keys in a map are all integer and sequential.
     *
     * Sequential keys are a sequence of integers that start with a `0` and go up, incrementing exactly by one.
     *
     * This method could be useful to see if a PHP's associative array (a map) can be naturally converted into a
     * regular array (SplFixedArray) when dealing with interfaces that are using the PHP's associative array in the
     * role of a regular array.
     *
     * As a special case, the method returns `true` for an empty map.
     *
     * @param  map $map The map to be looked into.
     *
     * @return bool `true` if all keys in the map are integer and sequential, `false` otherwise.
     */

    public static function areKeysSequential ($map)
    {
        assert( 'is_cmap($map)', vs(isset($this), get_defined_vars()) );

        $map = parray($map);

        $keys = self::keys($map);
        $len = CArray::length($keys);
        for ($i = 0; $i < $len; $i++)
        {
            if ( !is_int($keys[$i]) || $keys[$i] != $i )
            {
                return false;
            }
        }
        return true;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Inserts a value into a map under the next integer key.
     *
     * This method could serve as a more eloquent alternative when dealing with interfaces that are using the PHP's
     * associative array in the role of a regular array.
     *
     * The new value is inserted under the integer key that is greater by one compared to the greatest integer key
     * already in the map or under `0` if there were no integer keys.
     *
     * @param  map $map The map to be modified.
     * @param  mixed $value The value to be inserted.
     *
     * @return void
     */

    public static function insertValue (&$map, $value)
    {
        assert( 'is_cmap($map)', vs(isset($this), get_defined_vars()) );

        if ( is_array($map) )
        {
            array_push($map, $value);
        }
        else  // CMapObject
        {
            $pArray = &$map->toPArray();
            array_push($pArray, $value);
        }
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    protected static function recurseMergingMaps (&$thisMap, $thatMap)
    {
        if ( !is_array($thisMap) )
        {
            $thisMap = &$thisMap->toPArray();
        }
        $thatMap = parray($thatMap);
        foreach ($thatMap as $thatKey => $thatValue)
        {
            $goDeeper = false;
            $thisValue;
            if ( is_cmap($thatValue) && self::hasKey($thisMap, $thatKey) )
            {
                $thisValue = &$thisMap[$thatKey];
                if ( is_cmap($thisValue) )
                {
                    $goDeeper = true;
                }
            }
            if ( $goDeeper )
            {
                self::recurseMergingMaps($thisValue, $thatValue);
            }
            else
            {
                $thisMap[$thatKey] = $thatValue;
            }
        }
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
}

