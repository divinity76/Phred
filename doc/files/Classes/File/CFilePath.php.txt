<?php


/**
 * A squad of static methods that track file system paths for various information.
 *
 * **You can refer to this class by its alias, which is** `Fp`.
 *
 * Except for `absolute` method, it is not required for any path that you provide to any method of the class to lead to
 * an existing file or directory.
 */

// Method signatures:
//   static CUStringObject name ($path)
//   static CUStringObject directory ($path)
//   static CUStringObject nameOnly ($path)
//   static CUStringObject extension ($path)
//   static CUStringObject lastExtension ($path)
//   static CUStringObject add ($basePath, $component)
//   static CUStringObject normalize ($path, $targetIsExecutable = false)
//   static CUStringObject absolute ($path)
//   static bool isAbsolute ($path)
//   static CUStringObject frameworkPath ($path)

class CFilePath extends CRootClass
{
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Returns the full name of the file or directory located at a specified path.
     *
     * The returned string contains the last component of the path i.e. everything what follows the last "/" in the
     * path, including any file extension(s), or the original path (after normalization) if there are no "/" in the
     * path.
     *
     * As special cases, the method returns "/", "..", or "." if the path (after normalization) is respectively "/",
     * "..", or ".".
     *
     * @param  string $path The path to the file or directory (can be absolute or relative).
     *
     * @return CUStringObject The full name of the file or directory.
     */

    public static function name ($path)
    {
        assert( 'is_cstring($path)', vs(isset($this), get_defined_vars()) );
        assert( '!CString::isEmpty($path)', vs(isset($this), get_defined_vars()) );

        $path = self::normalize($path);
        if ( CString::find($path, "/") )
        {
            $foundString;
            CRegex::find($path, "/(?<=\\/)[^\\/]*\\z/", $foundString);
            if ( CString::isEmpty($foundString) )
            {
                $foundString = "/";
            }
            return $foundString;
        }
        else
        {
            return $path;
        }
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Returns the path to the directory that contains the file or directory located at a specified path.
     *
     * The path should not be "/", "..", "." or be equivalent to any of them.
     *
     * @param  string $path The path to the file or directory (can be absolute or relative).
     *
     * @return CUStringObject The path to the directory (after normalization) that contains the file or directory
     * located at the path specified.
     */

    public static function directory ($path)
    {
        assert( 'is_cstring($path)', vs(isset($this), get_defined_vars()) );
        assert( '!CString::isEmpty($path)', vs(isset($this), get_defined_vars()) );

        $path = self::normalize($path);
        if ( CString::equals($path, "..") || CString::equals($path, ".") )
        {
            return ".";
        }
        if ( CString::find($path, "/") )
        {
            $foundString;
            CRegex::find($path, "/^.*(?=\\/)/", $foundString);
            if ( CString::isEmpty($foundString) )
            {
                $foundString = "/";
            }
            return $foundString;
        }
        else
        {
            return ".";
        }
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Returns the name of the file or directory located at a specified path, without any extensions.
     *
     * As special cases, the method returns "/", "..", or "." if the path (after normalization) is respectively "/",
     * "..", or ".".
     *
     * @param  string $path The path to the file or directory (can be absolute or relative).
     *
     * @return CUStringObject The name of the file or directory, without any extensions.
     */

    public static function nameOnly ($path)
    {
        assert( 'is_cstring($path)', vs(isset($this), get_defined_vars()) );

        $name = self::name($path);
        if ( CString::equals($name, "..") || CString::equals($name, ".") )
        {
            return $name;
        }
        $foundString;
        CRegex::find($name, "/^.*?(?=\\.|\\z)/", $foundString);
        return $foundString;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Returns the full extension of the file located at a specified path.
     *
     * For example, the full extension of "/path/to/file.tar.gz" is "tar.gz".
     *
     * @param  string $path The path to the file (can be absolute or relative).
     *
     * @return CUStringObject The full extension of the file.
     */

    public static function extension ($path)
    {
        assert( 'is_cstring($path)', vs(isset($this), get_defined_vars()) );
        assert( '!CString::isEmpty($path)', vs(isset($this), get_defined_vars()) );

        $foundString;
        if ( CRegex::find($path, "/(?<=\\.(?!\\.))[^\\/]+\\z/", $foundString) )
        {
            return $foundString;
        }
        else
        {
            return "";
        }
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Returns only the last extension of the file located at a specified path.
     *
     * For example, the last extension of "/path/to/file.tar.gz" is "gz".
     *
     * @param  string $path The path to the file (can be absolute or relative).
     *
     * @return CUStringObject The last extension of the file.
     */

    public static function lastExtension ($path)
    {
        assert( 'is_cstring($path)', vs(isset($this), get_defined_vars()) );
        assert( '!CString::isEmpty($path)', vs(isset($this), get_defined_vars()) );

        $foundString;
        if ( CRegex::find($path, "/(?<=\\.)[^\\/.]+\\z/", $foundString) )
        {
            return $foundString;
        }
        else
        {
            return "";
        }
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Adds a path component to a path, separating them with a slash if needed, and returns the combined path.
     *
     * If the specified path component already starts with "/", it still results in a single "/" as the separator. And,
     * as a special case, if the base path is empty, the returned string is the same as the specified path component.
     *
     * @param  string $basePath The base path (can be absolute or relative).
     * @param  string $component The path component to be added to the base path (cannot be absolute).
     *
     * @return CUStringObject The combined path.
     */

    public static function add ($basePath, $component)
    {
        assert( 'is_cstring($basePath) && is_cstring($component)', vs(isset($this), get_defined_vars()) );
        assert( '!CString::isEmpty($component)', vs(isset($this), get_defined_vars()) );

        if ( CString::isEmpty($basePath) )
        {
            return $component;
        }
        if ( !CString::endsWith($basePath, "/") )
        {
            $basePath .= "/";
        }
        return $basePath . $component;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Normalizes a path by removing any trailing slashes, any redundant slashes, any references to the current
     * directory, and any references to the parent directory where possible, and returns the new path.
     *
     * For example, "/path//./dir-a/.././to//../dir-b/" is normalized to "/path/dir-b".
     *
     * @param  string $path The path to be normalized (can be absolute or relative).
     * @param  bool $targetIsExecutable **OPTIONAL. Default is** `false`. Tells whether the path's target should be
     * treated as an executable so that, if the path starts with ".", the resulting path will start with "." too and
     * the "." will not be removed as a reference to the current directory.
     *
     * @return CUStringObject The normalized path.
     */

    public static function normalize ($path, $targetIsExecutable = false)
    {
        assert( 'is_cstring($path) && is_bool($targetIsExecutable)', vs(isset($this), get_defined_vars()) );
        assert( '!CString::isEmpty($path)', vs(isset($this), get_defined_vars()) );

        $path = CRegex::replace($path, "/\\/{2,}/", "/");  // normalize consecutive slashes
        $path = CString::stripEnd($path, "/");  // remove the trailing slash, if any
        if ( CString::isEmpty($path) )
        {
            return "/";
        }
        $path = CRegex::remove($path, "/\\/\\.(?=\\/|\\z)/");  // remove any "/." followed by a slash or at the end
        if ( CString::isEmpty($path) )
        {
            return "/";
        }
        if ( !$targetIsExecutable )
        {
            $path = CString::stripStart($path, "./");
        }

        $pathIsAbsolute;

        if ( !CString::startsWith($path, "/") )
        {
            $pathIsAbsolute = false;
        }
        else
        {
            $pathIsAbsolute = true;
            $path = CString::substr($path, 1);
        }

        if ( !CString::find($path, "/") )
        {
            if ( $pathIsAbsolute )
            {
                if ( !CString::equals($path, "..") )
                {
                    $path = "/$path";
                }
                else
                {
                    $path = "/";
                }
            }
            return $path;
        }

        // Recompose the path.
        $components = CString::split($path, "/");
        $newComponents = CArray::make();
        $len = CArray::length($components);
        for ($i = 0; $i < $len; $i++)
        {
            $comp = $components[$i];
            $lastAddedComp = "";
            $noCompsAddedYet = CArray::isEmpty($newComponents);
            if ( !$noCompsAddedYet )
            {
                $lastAddedComp = CArray::last($newComponents);
            }
            if ( CString::equals($comp, "..") )
            {
                if ( $noCompsAddedYet ||
                     CString::equals($lastAddedComp, "..") || CString::equals($lastAddedComp, ".") )
                {
                    if ( !($noCompsAddedYet && $pathIsAbsolute) )
                    {
                        CArray::push($newComponents, $comp);
                    }
                }
                else
                {
                    CArray::pop($newComponents);
                }
            }
            else
            {
                CArray::push($newComponents, $comp);
            }
        }
        $path = CArray::join($newComponents, "/");
        if ( $pathIsAbsolute )
        {
            $path = "/$path";
        }
        else if ( CString::isEmpty($path) )
        {
            $path = ".";
        }
        return $path;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Asks the file system for the absolute path to a file or directory located at a specified relative path and
     * returns the answer.
     *
     * The file or directory should actually exist for the file system to be able to answer.
     *
     * @param  string $path The path to the file or directory (usually a relative one).
     *
     * @return CUStringObject The absolute path to the file or directory.
     */

    public static function absolute ($path)
    {
        assert( 'is_cstring($path)', vs(isset($this), get_defined_vars()) );
        assert( '!CString::isEmpty($path)', vs(isset($this), get_defined_vars()) );

        $absPath = realpath($path);
        assert( 'is_cstring($absPath)', vs(isset($this), get_defined_vars()) );
        return $absPath;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Determines if a path is absolute.
     *
     * @param  string $path The path to be looked into.
     *
     * @return bool `true` if the path is absolute, `false` otherwise.
     */

    public static function isAbsolute ($path)
    {
        assert( 'is_cstring($path)', vs(isset($this), get_defined_vars()) );
        assert( '!CString::isEmpty($path)', vs(isset($this), get_defined_vars()) );

        return CString::startsWith($path, "/");
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Replaces any reference to one of the framework's special directories in a path with the directory's actual path
     * and returns the usable path.
     *
     * A framework's directory is referenced in a path by wrapping its ID into double curly braces, as in
     * "{{PHRED_PATH_TO_FRAMEWORK_ROOT}}", optionally with "/" after the reference.
     *
     * @param  string $path The path to the file or directory (can be absolute or relative).
     *
     * @return CUStringObject The usable path.
     */

    public static function frameworkPath ($path)
    {
        assert( '!isset($path) || is_cstring($path)', vs(isset($this), get_defined_vars()) );

        if ( !isset($path) )
        {
            return null;
        }

        // Replace every "{{EXAMPLE_PATH}}" in the path string with the value of "EXAMPLE_PATH" key from $GLOBALS
        // variable if such key exists in the variable.

        $modified = false;
        $path = CRegex::replaceWithCallback($path, "/\\{\\{\\w+\\}\\}/", function ($matches) use (&$modified)
            {
                $pathVarName = CString::substr($matches[0], 2, CString::length($matches[0]) - 4);
                if ( isset($GLOBALS[$pathVarName]) )
                {
                    $modified = true;
                    return $GLOBALS[$pathVarName] . "/";
                }
                else
                {
                    assert( 'false', vs(isset($this), get_defined_vars()) );
                    return $matches[0];
                }
            });
        if ( $modified )
        {
            $path = CRegex::replace($path, "/\\/{2,}/", "/");
        }
        return $path;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
}

