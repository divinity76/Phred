<?php


/**
 * The class of HTTP cookies when they are a part of an HTTP response.
 *
 * **Defaults:**
 *
 * * The cookie expires together with the end of the user agent's session.
 * * The cookie's path is global ("/").
 * * The cookie's domain is not specified (should default to the domain from which the cookie was set).
 * * The cookie is not secure (not limited to just encrypted connections).
 * * The cookie is HttpOnly (not accessible from JavaScript).
 */

// Method signatures:
//   __construct ($cookieName, $value)
//   void setExpireInterval ($timeUnit, $quantity)
//   void setExpireTime (CTime $time)
//   void setPath ($path)
//   void setDomain ($domain)
//   void setSecure ($enable)
//   void setHttpOnly ($enable)
//   CUStringObject name ()
//   CUStringObject value ()
//   int expireUTime ()
//   CUStringObject path ()
//   CUStringObject domain ()
//   bool secure ()
//   bool httpOnly ()

class CCookie extends CRootClass
{
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Creates an HTTP cookie to be sent along with an HTTP response.
     *
     * Internally, the value of a cookie is always stored as a string. If the cookie's value was provided as an array
     * or map, it's encoded into JSON and is stored as a JSON string. Boolean values are stored as "1" for `true` and
     * as "0" for `false`.
     *
     * @param  string $cookieName The cookie's name.
     * @param  mixed $value The cookie's value. This can be a string, a `bool`, an `int`, a `float`, an array, or a
     * map.
     */

    public function __construct ($cookieName, $value)
    {
        assert( 'is_cstring($cookieName) && (is_cstring($value) || is_bool($value) || is_int($value) || ' .
                'is_float($value) || is_collection($value))', vs(isset($this), get_defined_vars()) );

        $this->m_name = $cookieName;

        if ( is_cstring($value) )
        {
            $this->m_value = $value;
        }
        else if ( is_bool($value) )
        {
            $this->m_value = CString::fromBool10($value);
        }
        else if ( is_int($value) )
        {
            $this->m_value = CString::fromInt($value);
        }
        else if ( is_float($value) )
        {
            $this->m_value = CString::fromFloat($value);
        }
        else  // a collection
        {
            $json = new CJson($value);
            $this->m_value = $json->encode();
        }
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Sets the point in time after which a cookie should be considered expired, as a time interval since the current
     * time.
     *
     * @param  enum $timeUnit The time unit in which the interval is to be calculated. Can be `CTime::SECOND`,
     * `CTime::MINUTE`, `CTime::HOUR`, `CTime::DAY`, `CTime::WEEK`, `CTime::MONTH`, or `CTime::YEAR`.
     * @param  int $quantity The quantity of the specified time units.
     *
     * @return void
     */

    public function setExpireInterval ($timeUnit, $quantity)
    {
        assert( 'is_enum($timeUnit) && is_int($quantity)', vs(isset($this), get_defined_vars()) );
        assert( '$quantity > 0', vs(isset($this), get_defined_vars()) );

        $currTime = CTime::now();
        $expireTime = $currTime->shiftedUtc($timeUnit, $quantity);
        $this->m_expireUTime = $expireTime->UTime();
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Sets the point in time after which a cookie should be considered expired, as a known moment.
     *
     * @param  CTime $time The point in time when the cookie should expire.
     *
     * @return void
     */

    public function setExpireTime (CTime $time)
    {
        $this->m_expireUTime = $time->UTime();
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Sets the path of a cookie.
     *
     * @param  string $path The path.
     *
     * @return void
     */

    public function setPath ($path)
    {
        assert( 'is_cstring($path)', vs(isset($this), get_defined_vars()) );
        $this->m_path = $path;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Sets the domain of a cookie.
     *
     * @param  string $domain The domain.
     *
     * @return void
     */

    public function setDomain ($domain)
    {
        assert( 'is_cstring($domain)', vs(isset($this), get_defined_vars()) );
        $this->m_domain = $domain;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Sets whether the sending of a cookie back to the server should be limited to just encrypted connections.
     *
     * @param  bool $enable `true` if the cookie should be limited to just encrypted connections, `false` if not.
     *
     * @return void
     */

    public function setSecure ($enable)
    {
        assert( 'is_bool($enable)', vs(isset($this), get_defined_vars()) );
        $this->m_secure = $enable;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Sets whether the access to a cookie should be limited to just HTTP/HTTPS methods of access.
     *
     * @param  bool $enable `true` if the access to the cookie should be limited to just HTTP/HTTPS methods of access,
     * `false` if not.
     *
     * @return void
     */

    public function setHttpOnly ($enable)
    {
        assert( 'is_bool($enable)', vs(isset($this), get_defined_vars()) );
        $this->m_httpOnly = $enable;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Returns the name of a cookie.
     *
     * @return CUStringObject The cookie's name.
     */

    public function name ()
    {
        return $this->m_name;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Returns the value of a cookie.
     *
     * @return CUStringObject The cookie's value.
     */

    public function value ()
    {
        return $this->m_value;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Returns the "Unix time" of the moment when a cookie is set to expire, which is the number of seconds relative to
     * the midnight of January 1, 1970 UTC.
     *
     * @return int The "Unix time" of the cookie's expiration.
     */

    public function expireUTime ()
    {
        return $this->m_expireUTime;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Returns the path of a cookie.
     *
     * @return CUStringObject The cookie's path.
     */

    public function path ()
    {
        return $this->m_path;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Returns the domain of a cookie.
     *
     * @return CUStringObject The cookie's domain.
     */

    public function domain ()
    {
        return $this->m_domain;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Tells whether a cookie is limited to just encrypted connections.
     *
     * @return bool `true` if the cookie is limited to just encrypted connections, `false` otherwise.
     */

    public function secure ()
    {
        return $this->m_secure;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Tells whether the access to a cookie is limited to just HTTP/HTTPS methods of access.
     *
     * @return bool `true` if the access to the cookie is limited to just HTTP/HTTPS methods of access, `false`
     * otherwise.
     */

    public function httpOnly ()
    {
        return $this->m_httpOnly;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    // Properties and defaults.
    protected $m_name;
    protected $m_value;
    protected $m_expireUTime = 0;
    protected $m_path = "/";
    protected $m_domain = "";
    protected $m_secure = false;
    protected $m_httpOnly = true;
}

