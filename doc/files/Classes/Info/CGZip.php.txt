<?php


/**
 * The static methods for decompressing data from and compressing data to gzip format.
 */

// Method signatures:
//   static CUStringObject decompress ($compressedData, &$success = null)
//   static CUStringObject compress ($data, $compressionLevel = self::NORMAL)

class CGZip extends CRootClass
{
    // Compression levels.
    /**
     * `enum` "Fastest" compression level (optimized for speed).
     *
     * @var enum
     */
    const FASTEST = 0;
    /**
     * `enum` "Fast" compression level.
     *
     * @var enum
     */
    const FAST = 1;
    /**
     * `enum` "Normal" compression level.
     *
     * @var enum
     */
    const NORMAL = 2;
    /**
     * `enum` "Maximum" compression level (optimized for compression ratio).
     *
     * @var enum
     */
    const MAXIMUM = 3;

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Decompresses a gzip-compressed data and returns the result.
     *
     * @param  data $compressedData The data to be decompressed.
     * @param  reference $success **OPTIONAL. OUTPUT.** After the method is called with this parameter provided, the
     * parameter's value tells whether the data was decompressed successfully.
     *
     * @return CUStringObject The decompressed data.
     */

    public static function decompress ($compressedData, &$success = null)
    {
        assert( 'is_cstring($compressedData)', vs(isset($this), get_defined_vars()) );

        $data = @gzdecode($compressedData);
        $success = is_cstring($data);
        if ( !$success )
        {
            $data = "";
        }
        return $data;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Compresses a data into gzip format and returns the result.
     *
     * @param  data $data The data to be compressed.
     * @param  enum $compressionLevel **OPTIONAL. Default is** `NORMAL`. The compression level. Can be `FASTEST`,
     * `FAST`, `NORMAL`, or `MAXIMUM`.
     *
     * @return CUStringObject The compressed data.
     */

    public static function compress ($data, $compressionLevel = self::NORMAL)
    {
        assert( 'is_cstring($data) && is_enum($compressionLevel)', vs(isset($this), get_defined_vars()) );

        $compressionLevelGZip = self::compressionLevelEnumToGZip($compressionLevel);
        $compressedData = gzencode($data, $compressionLevelGZip, FORCE_GZIP);
        assert( 'is_cstring($compressedData)', vs(isset($this), get_defined_vars()) );
        return $compressedData;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    protected static function compressionLevelEnumToGZip ($compressionLevel)
    {
        switch ( $compressionLevel )
        {
        case self::FASTEST:
            return 1;
        case self::FAST:
            return 3;
        case self::NORMAL:
            return 6;
        case self::MAXIMUM:
            return 9;
        default:
            assert( 'false', vs(isset($this), get_defined_vars()) );
        }
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
}

