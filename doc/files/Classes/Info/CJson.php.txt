<?php


/**
 * The class that lets you decode even malformed JSON strings and to encode maps and arrays into JSON strings.
 *
 * **You can refer to this class by its alias, which is** `Jn`.
 *
 * In the process of decoding, a JSON string is transformed into a map or array, with any JSON array naturally becoming
 * an array and any plain JSON object, which is essentially an associative array, becoming a map.
 *
 * For decoding, there are three "difficulty levels" that you can choose from for an input JSON string. The strictest
 * level is `STRICT`, according to which the input JSON string is expected to be conforming to the JSON standard to the
 * smallest detail, then goes `STRICT_WITH_COMMENTS`, which allows for "//" and "/\*" comments in the JSON string, and
 * `LENIENT`, with which you can still successfully decode a JSON string that contains "//" and "/\*" comments, uses
 * single quotes on values (the JSON format requires double quotes), uses single quotes or no quotes at all on property
 * names, or contains trailing commas where they are redundant.
 *
 * **NOTE.** An integer value from a JSON string may get decoded into an integer or, if the value is too large, into a
 * floating-point value.
 *
 * **Defaults for decoding:**
 *
 * * The strictness is `STRICT`.
 *
 * **Defaults for encoding:**
 *
 * * Escape non-ASCII characters is `false`.
 * * Escape forward slashes is `false`.
 * * Escape angle brackets is `false`.
 * * Escape ampersands is `false`.
 * * Escape single quotes is `false`.
 * * Escape double quotes is `false`.
 * * Pretty printing is `false`.
 */

// Method signatures:
//   __construct ($source, $decodingStrictness = self::STRICT)
//   void setEscapeNonAsciiChars ($enable)
//   void setEscapeForwardSlashes ($enable)
//   void setEscapeAngleBrackets ($enable)
//   void setEscapeAmpersands ($enable)
//   void setEscapeSingleQuotes ($enable)
//   void setEscapeDoubleQuotes ($enable)
//   void setPrettyPrint ($enable)
//   mixed decode (&$success = null)
//   CUStringObject encode ()

class CJson extends CRootClass
{
    // Decoding strictnesses.
    /**
     * `enum` Strict, with no comments expected in the JSON string.
     *
     * @var enum
     */
    const STRICT = 0;
    /**
     * `enum` Strict, with "//" and "/*" comments allowed in the JSON string.
     *
     * @var enum
     */
    const STRICT_WITH_COMMENTS = 1;
    /**
     * `enum` Lenient, with "//" and "/*" comments allowed in the JSON string, as well as single-quoted values,
     * single-quoted or just unquoted property names (keys), trailing commas after the last element in a JSON array or
     * after the last property (key-value pair) in a JSON object, and control characters represented by their literal
     * values, such as a tab represented by a 0x09 byte.
     *
     * @var enum
     */
    const LENIENT = 2;

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Creates a JSON decoder or encoder.
     *
     * @param  mixed $source The string to be decoded from JSON or the map or array to be encoded into JSON. In case
     * of a map or array, it can be multidimensional and contain other maps and arrays.
     * @param  enum $decodingStrictness **OPTIONAL. Default is** `STRICT`. If the object is being constructed for
     * decoding, this is the decoding strictness. Can be `STRICT`, `STRICT_WITH_COMMENTS`, or `LENIENT`
     * (see [Summary](#summary)).
     */

    public function __construct ($source, $decodingStrictness = self::STRICT)
    {
        assert( '(is_cstring($source) || is_cmap($source) || is_carray($source)) && is_enum($decodingStrictness)',
            vs(isset($this), get_defined_vars()) );

        $this->m_source = $source;
        $this->m_decodingStrictness = $decodingStrictness;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * For encoding, sets whether any non-ASCII character should appear escaped in the resulting string.
     *
     * @param  bool $enable `true` to make any non-ASCII character appear escaped in the resulting string, `false`
     * otherwise.
     *
     * @return void
     */

    public function setEscapeNonAsciiChars ($enable)
    {
        assert( 'is_bool($enable)', vs(isset($this), get_defined_vars()) );
        $this->m_escapeNonAsciiChars = $enable;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * For encoding, sets whether any "/" should appear escaped in the resulting string.
     *
     * @param  bool $enable `true` to make any "/" appear escaped in the resulting string, `false` otherwise.
     *
     * @return void
     */

    public function setEscapeForwardSlashes ($enable)
    {
        assert( 'is_bool($enable)', vs(isset($this), get_defined_vars()) );
        $this->m_escapeForwardSlashes = $enable;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * For encoding, sets whether any "<" or ">" should appear escaped in the resulting string.
     *
     * @param  bool $enable `true` to make any "<" or ">" appear escaped in the resulting string, `false` otherwise.
     *
     * @return void
     */

    public function setEscapeAngleBrackets ($enable)
    {
        assert( 'is_bool($enable)', vs(isset($this), get_defined_vars()) );
        $this->m_escapeAngleBrackets = $enable;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * For encoding, sets whether any "&" should appear escaped in the resulting string.
     *
     * @param  bool $enable `true` to make any "&" appear escaped in the resulting string, `false` otherwise.
     *
     * @return void
     */

    public function setEscapeAmpersands ($enable)
    {
        assert( 'is_bool($enable)', vs(isset($this), get_defined_vars()) );
        $this->m_escapeAmpersands = $enable;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * For encoding, sets whether any single quote should appear escaped in the resulting string.
     *
     * @param  bool $enable `true` to make any single quote appear escaped in the resulting string, `false` otherwise.
     *
     * @return void
     */

    public function setEscapeSingleQuotes ($enable)
    {
        assert( 'is_bool($enable)', vs(isset($this), get_defined_vars()) );
        $this->m_escapeSingleQuotes = $enable;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * For encoding, sets whether any double quote should appear escaped in the resulting string.
     *
     * @param  bool $enable `true` to make any double quote appear escaped in the resulting string, `false` otherwise.
     *
     * @return void
     */

    public function setEscapeDoubleQuotes ($enable)
    {
        assert( 'is_bool($enable)', vs(isset($this), get_defined_vars()) );
        $this->m_escapeDoubleQuotes = $enable;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * For encoding, sets whether the resulting string should appear well-formatted with additional whitespace and
     * newlines.
     *
     * @param  bool $enable `true` to enable pretty-printing for the resulting string, `false` otherwise.
     *
     * @return void
     */

    public function setPrettyPrint ($enable)
    {
        assert( 'is_bool($enable)', vs(isset($this), get_defined_vars()) );
        $this->m_prettyPrint = $enable;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Decodes the JSON-encoded string provided earlier to the decoder and returns the result.
     *
     * @param  reference $success **OPTIONAL. OUTPUT.** After the method is called with this parameter provided, the
     * parameter's value tells whether the decoding was successful.
     *
     * @return mixed The decoded value of type `CMapObject` or `CArrayObject`.
     */

    public function decode (&$success = null)
    {
        assert( 'is_cstring($this->m_source)', vs(isset($this), get_defined_vars()) );

        $success = true;

        $source = $this->m_source;

        if ( $this->m_decodingStrictness == self::LENIENT &&
             !CUString::isValid($source) )
        {
            // Change the character encoding or try fixing it.
            if ( CEString::looksLikeLatin1($source) )
            {
                $source = CEString::convertLatin1ToUtf8($source);
            }
            else
            {
                $source = CEString::fixUtf8($source);
            }
        }

        if ( $this->m_decodingStrictness == self::STRICT_WITH_COMMENTS ||
             $this->m_decodingStrictness == self::LENIENT )
        {
            if ( CRegex::find($source, "/\\/\\/|\\/\\*/u") )
            {
                // Remove "//..." and "/*...*/" comments.
                $source = CRegex::remove($source,
                    "/(?<!\\\\)\"(?:[^\\\\\"]++|\\\\{2}|\\\\\\C)*\"(*SKIP)(*FAIL)|" .
                    "\\/\\/.*|\\/\\*\\C*?\\*\\//u");
            }
        }

        if ( $this->m_decodingStrictness == self::LENIENT )
        {
            if ( CRegex::find($source, "/[:\\[,]\\s*'([^\\\\']++|\\\\{2}|\\\\\\C)*'(?=\\s*[,}\\]])/u") )
            {
                // Convert single-quoted string values into double-quoted, taking care of double quotes within such
                // strings before and single quotes after. This needs to go in front of the rest of the leniency fixes.
                while ( true )
                {
                    $prevSource = $source;
                    $source = CRegex::replace($source,
                        "/(?<!\\\\)\"(?:[^\\\\\"]++|\\\\{2}|\\\\\\C)*\"(*SKIP)(*FAIL)|" .
                        "([:\\[,]\\s*'(?:[^\\\\'\"]++|\\\\{2}|\\\\\\C)*)\"((?:[^\\\\']++|\\\\{2}|\\\\\\C)*')/u",
                        "$1\\\"$2");
                    if ( CString::equals($source, $prevSource) || is_null($source) )
                    {
                        break;
                    }
                }
                if ( is_null($source) )
                {
                    $source = "";
                }

                $source = CRegex::replace($source,
                    "/(?<!\\\\)\"(?:[^\\\\\"]++|\\\\{2}|\\\\\\C)*\"(*SKIP)(*FAIL)|" .
                    "([:\\[,]\\s*)'((?:[^\\\\']++|\\\\{2}|\\\\\\C)*)'(?=\\s*[,}\\]])/u", "$1\"$2\"");

                while ( true )
                {
                    $prevSource = $source;
                    $source = CRegex::replace($source,
                        "/([:\\[,]\\s*\"(?:[^\\\\\"]++|\\\\{2}|\\\\[^'])*)\\\\'((?:[^\\\\\"]++|\\\\{2}|\\\\\\C)*\")" .
                        "(?=\\s*[,}\\]])/u", "$1'$2");
                    if ( CString::equals($source, $prevSource) || is_null($source) )
                    {
                        break;
                    }
                }
                if ( is_null($source) )
                {
                    $source = "";
                }
            }

            if ( CRegex::find($source, "/[{,]\\s*[\\w\\-.]+\\s*:/u" ) )
            {
                // Put property names in double quotes.
                $source = CRegex::replace($source,
                    "/(?<!\\\\)\"(?:[^\\\\\"]++|\\\\{2}|\\\\\\C)*\"(*SKIP)(*FAIL)|" .
                    "([{,]\\s*)([\\w\\-.]+)(\\s*:)/u", "$1\"$2\"$3");
            }

            if ( CRegex::find($source, "/[{,]\\s*'[\\w\\-.]+'\\s*:/u" ) )
            {
                // Put property names that are in single quotes in double quotes.
                $source = CRegex::replace($source,
                    "/(?<!\\\\)\"(?:[^\\\\\"]++|\\\\{2}|\\\\\\C)*\"(*SKIP)(*FAIL)|" .
                    "([{,]\\s*)'([\\w\\-.]+)'(\\s*:)/u", "$1\"$2\"$3");
            }

            if ( CRegex::find($source, "/,\\s*[}\\]]/u" ) )
            {
                // Remove trailing commas.
                $source = CRegex::remove($source,
                    "/(?<!\\\\)\"(?:[^\\\\\"]++|\\\\{2}|\\\\\\C)*\"(*SKIP)(*FAIL)|" .
                    ",(?=\\s*[}\\]])/u");
            }

            // Within string values, convert byte values for BS, FF, LF, CR, and HT, which are prohibited in JSON,
            // to their escaped equivalents.
            $stringValueSubjectRe = "/(?<!\\\\)\"(?:[^\\\\\"]++|\\\\{2}|\\\\\\C)*\"/u";
            $source = CRegex::replaceWithCallback($source, $stringValueSubjectRe, function ($matches)
                {
                    return CRegex::replace($matches[0], "/\\x{0008}/u", "\\b");
                });
            $source = CRegex::replaceWithCallback($source, $stringValueSubjectRe, function ($matches)
                {
                    return CRegex::replace($matches[0], "/\\x{000C}/u", "\\f");
                });
            $source = CRegex::replaceWithCallback($source, $stringValueSubjectRe, function ($matches)
                {
                    return CRegex::replace($matches[0], "/\\x{000A}/u", "\\n");
                });
            $source = CRegex::replaceWithCallback($source, $stringValueSubjectRe, function ($matches)
                {
                    return CRegex::replace($matches[0], "/\\x{000D}/u", "\\r");
                });
            $source = CRegex::replaceWithCallback($source, $stringValueSubjectRe, function ($matches)
                {
                    return CRegex::replace($matches[0], "/\\x{0009}/u", "\\t");
                });
        }

        $decodedValue = @json_decode($source, false, self::$ms_maxRecursionDepth);

        if ( is_null($decodedValue) )
        {
            if ( $this->m_decodingStrictness == self::STRICT ||
                 $this->m_decodingStrictness == self::STRICT_WITH_COMMENTS )
            {
                $success = false;
            }
            else if ( CRegex::find($source, "/^\\s*[\\w.]+\\s*\\(/u") )  // $this->m_decodingStrictness = LENIENT
            {
                // The source string appears to be a JSONP. Extract the function's argument and try decoding again.
                $source = CRegex::replace($source, "/^\\s*[\\w.]+\\s*\\((\\C+)\\)/u", "$1");
                $decodedValue = @json_decode($source, false, self::$ms_maxRecursionDepth);
                if ( is_null($decodedValue) )
                {
                    $success = false;
                }
            }
        }
        if ( !$success )
        {
            return;
        }

        if ( $this->m_decodingStrictness == self::STRICT ||
             $this->m_decodingStrictness == self::STRICT_WITH_COMMENTS )
        {
            if ( !is_object($decodedValue) && !is_array($decodedValue) )
            {
                $success = false;
                return;
            }
        }

        // Recursively convert any object into a CMapObject/CMap and any PHP array into a CArrayObject/CArray.
        $decodedValue = self::recurseValueAfterDecoding($decodedValue, 0);

        return $decodedValue;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Encodes the map or array provided earlier to the encoder into a JSON string and returns it.
     *
     * @return CUStringObject The resulting JSON string.
     */

    public function encode ()
    {
        assert( 'is_cmap($this->m_source) || is_carray($this->m_source)', vs(isset($this), get_defined_vars()) );

        $source = $this->m_source;

        if ( CDebug::assertionsLevel2() )
        {
            // Check character encodings in string values.
            self::recurseStringValidation($source, 0);
        }

        $source = self::recurseValueBeforeEncoding($source, 0);

        $options = 0;
        if ( !$this->m_escapeNonAsciiChars )
        {
            $options |= JSON_UNESCAPED_UNICODE;
        }
        if ( !$this->m_escapeForwardSlashes )
        {
            $options |= JSON_UNESCAPED_SLASHES;
        }
        if ( $this->m_escapeAngleBrackets )
        {
            $options |= JSON_HEX_TAG;
        }
        if ( $this->m_escapeAmpersands )
        {
            $options |= JSON_HEX_AMP;
        }
        if ( $this->m_escapeSingleQuotes )
        {
            $options |= JSON_HEX_APOS;
        }
        if ( $this->m_escapeDoubleQuotes )
        {
            $options |= JSON_HEX_QUOT;
        }
        if ( $this->m_prettyPrint )
        {
            $options |= JSON_PRETTY_PRINT;
        }

        $encodedValue = json_encode($source, $options, self::$ms_maxRecursionDepth);
        assert( 'is_cstring($encodedValue) && !CString::isEmpty($encodedValue)',
            vs(isset($this), get_defined_vars()) );
        return $encodedValue;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    protected static function recurseValueAfterDecoding ($value, $currDepth)
    {
        if ( $currDepth == self::$ms_maxRecursionDepth )
        {
            return $value;
        }
        $currDepth++;

        if ( is_string($value) )
        {
            return $value;
        }

        if ( is_object($value) )
        {
            $value = (array)$value;
            foreach ($value as &$valueInMap)
            {
                $valueInMap = self::recurseValueAfterDecoding($valueInMap, $currDepth);
            } unset($valueInMap);
            $value = oop_m($value);
        }
        else if ( is_array($value) )
        {
            $value = CArray::fromPArray($value);
            $len = CArray::length($value);
            for ($i = 0; $i < $len; $i++)
            {
                $value[$i] = self::recurseValueAfterDecoding($value[$i], $currDepth);
            }
            $value = oop_a($value);
        }
        return $value;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    protected static function recurseStringValidation ($value, $currDepth)
    {
        if ( $currDepth == self::$ms_maxRecursionDepth )
        {
            return;
        }
        $currDepth++;

        if ( is_cmap($value) )
        {
            foreach ($value as $valueInMap)
            {
                self::recurseStringValidation($valueInMap, $currDepth);
            }
        }
        else if ( is_carray($value) )
        {
            $len = CArray::length($value);
            for ($i = 0; $i < $len; $i++)
            {
                self::recurseStringValidation($value[$i], $currDepth);
            }
        }
        else if ( is_cstring($value) )
        {
            assert( 'CUString::isValid($value)', vs(isset($this), get_defined_vars()) );
        }
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    protected static function recurseValueBeforeEncoding ($value, $currDepth)
    {
        if ( $currDepth == self::$ms_maxRecursionDepth )
        {
            return $value;
        }
        $currDepth++;

        if ( is_cstring($value) )
        {
            return $value;
        }

        if ( is_cmap($value) )
        {
            $value = parray($value);
            foreach ($value as &$valueInMap)
            {
                $valueInMap = self::recurseValueBeforeEncoding($valueInMap, $currDepth);
            } unset($valueInMap);
            $value = (object)$value;
        }
        else if ( is_carray($value) )
        {
            $value = splarray($value);
            $len = CArray::length($value);
            for ($i = 0; $i < $len; $i++)
            {
                $value[$i] = self::recurseValueBeforeEncoding($value[$i], $currDepth);
            }
            $value = CArray::toPArray($value);
        }
        return $value;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    // Properties and defaults.
    protected $m_source;
    protected $m_decodingStrictness;
    protected $m_escapeNonAsciiChars = false;
    protected $m_escapeForwardSlashes = false;
    protected $m_escapeAngleBrackets = false;
    protected $m_escapeAmpersands = false;
    protected $m_escapeSingleQuotes = false;
    protected $m_escapeDoubleQuotes = false;
    protected $m_prettyPrint = false;

    protected static $ms_maxRecursionDepth = CSystem::DEFAULT_MAX_RECURSION_DEPTH;
}

