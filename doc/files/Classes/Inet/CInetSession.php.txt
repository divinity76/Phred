<?php


/**
 * The class that lets you send multiple requests over the Internet in a time-efficient way and with HTTP cookies
 * supported.
 *
 * **You can refer to this class by its alias, which is** `InetSess`.
 *
 * When you send two or more requests bundled in a session, whether those requests are interrelated or not, you save
 * time by letting the requests be processed by remote server(s) in parallel since, as much as it is allowed by the
 * maximum number of concurrent requests, a request does not have to wait for the previously sent request to complete
 * in order to be sent out.
 *
 * With the CInetSession class, a session is not limited just to the initially added requests and any number of
 * subsequent requests can be queued into the session from a callback function that, if specified, is invoked by the
 * session after a request is complete.
 *
 * **Defaults:**
 *
 * * Cookies are enabled.
 * * The maximum number of concurrent requests is 8.
 */

// Method signatures:
//   __construct ()
//   CUStringObject errorMessage ()
//   void addRequest (CInetRequest $request, $onCompleteCallback = null, $newCookieSession = false)
//   void setEnableCookies ($enable)
//   void setMaxNumConcurrentRequests ($maxNumConcurrentRequests)
//   void start (&$success = null)

class CInetSession extends CRootClass
{
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Creates an Internet session ready to be populated with requests.
     */

    public function __construct ()
    {
        $this->m_requestRecordsQueue = CArray::make();

        $this->m_multiCurl = curl_multi_init();
        if ( !is_resource($this->m_multiCurl) )
        {
            $this->m_hasError = true;
            $this->m_errorMessage = "Multi cURL initialization failed.";
            $this->finalize();
            return;
        }
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * If a session did not succeed, returns the human-readable error message that is describing the problem.
     *
     * @return CUStringObject The error message.
     */

    public function errorMessage ()
    {
        assert( '$this->m_hasError', vs(isset($this), get_defined_vars()) );
        return $this->m_errorMessage;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Adds a request to a session.
     *
     * @param  CInetRequest $request The request to be added.
     * @param  callable $onCompleteCallback **OPTIONAL.** The callback function or method to be called by the session
     * when the request completes. The function is expected to take four parameters: a flag of type `bool` that tells
     * whether the request was successful, the response of type `CUStringObject` that was received for the request, an
     * object of type `CInetRequest` that represents the request, and an object of type `CInetSession` that represents
     * the session to which the request belongs, in this order. You can use the session's object to add more requests
     * to the request queue of the session depending on the response or any other factors.
     * @param  bool $newCookieSession **OPTIONAL. Default is** `false`. Tells whether to delete all previously stored
     * cookies that were set by the remote server(s) to expire when the "browsing session" during which those cookies
     * were received comes to an end (you can have as much of such "browsing sessions" as you like). If this parameter
     * is `true`, the "browsing session" cookies are deleted before the request is sent.
     *
     * @return void
     */

    public function addRequest (CInetRequest $request, $onCompleteCallback = null, $newCookieSession = false)
    {
        assert( '(!isset($onCompleteCallback) || is_callable($onCompleteCallback)) && is_bool($newCookieSession)',
            vs(isset($this), get_defined_vars()) );

        $requestRecord = CArray::fromElements($request, $onCompleteCallback, $newCookieSession);
        CArray::push($this->m_requestRecordsQueue, $requestRecord);
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Enables or disables cookies for a session.
     *
     * @param  bool $enable `true` to enable cookies for the session, `false` otherwise.
     *
     * @return void
     */

    public function setEnableCookies ($enable)
    {
        assert( 'is_bool($enable)', vs(isset($this), get_defined_vars()) );
        $this->m_cookiesAreEnabled = $enable;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Sets the maximum number of requests that are allowed to be processed in parallel by a session.
     *
     * @param  int $maxNumConcurrentRequests The maximum number of concurrent requests.
     *
     * @return void
     */

    public function setMaxNumConcurrentRequests ($maxNumConcurrentRequests)
    {
        assert( 'is_int($maxNumConcurrentRequests)', vs(isset($this), get_defined_vars()) );
        assert( '$maxNumConcurrentRequests > 0', vs(isset($this), get_defined_vars()) );

        $this->m_maxNumConcurrentRequests = $maxNumConcurrentRequests;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Starts a session by sending out the added requests.
     *
     * @param  reference $success **OPTIONAL. OUTPUT.** After the method is called with this parameter provided, the
     * parameter's value tells whether the session was successful.
     *
     * @return void
     */

    public function start (&$success = null)
    {
        $success = true;

        if ( $this->m_hasError )
        {
            $success = false;
            return;
        }

        if ( CArray::isEmpty($this->m_requestRecordsQueue) )
        {
            // Nothing to do.
            return;
        }

        // Current policy is to disable HTTP pipelining.
        $res = curl_multi_setopt($this->m_multiCurl, CURLMOPT_PIPELINING, 0);
        if ( !$res )
        {
            // Should never get in here as long as cURL options are being set correctly, hence the assertion.
            assert( 'false', vs(isset($this), get_defined_vars()) );
            $this->m_hasError = true;
            $this->m_errorMessage = "The 'curl_multi_setopt' function failed.";
            $success = false;
            $this->finalize();
            return;
        }

        $anySuccessfulRequests = false;

        // Disable the script's execution timeout before getting into the session.
        $timeoutPause = new CTimeoutPause();

        $numRunningRequests = 0;  // also the index of the next request to send
        while ( true )
        {
            // From the request queue, add as many normal cURL handles to the multi cURL handle as it is allowed by the
            // maximum number of concurrent requests, priorly setting internal options for every request.
            while ( $numRunningRequests < CArray::length($this->m_requestRecordsQueue) &&
                    $numRunningRequests < $this->m_maxNumConcurrentRequests )
            {
                $requestRecord = $this->m_requestRecordsQueue[$numRunningRequests];
                $request = $requestRecord[0];
                $onCompleteCallback = $requestRecord[1];
                $newCookieSession = $requestRecord[2];
                $requestCurl = $request->curl();

                // Set cURL options for the normal cURL handle, having created a temporary file for cookie storage if
                // needed.
                $requestSetOptSuccess;
                if ( $this->m_cookiesAreEnabled && $request->isHttp() )
                {
                    if ( !isset($this->m_cookiesFp) )
                    {
                        $this->m_cookiesFp = CFile::createTemporary();
                    }
                    $request->setInternalOptions($requestSetOptSuccess, $this->m_cookiesFp, $newCookieSession);
                }
                else
                {
                    $request->setInternalOptions($requestSetOptSuccess);
                }
                if ( !$requestSetOptSuccess )
                {
                    if ( isset($onCompleteCallback) )
                    {
                        call_user_func($onCompleteCallback, false, "", $request, $this);
                    }
                    CArray::remove($this->m_requestRecordsQueue, $numRunningRequests);
                    continue;
                }

                // Add the normal cURL handle to the multi cURL handle.
                $res = curl_multi_add_handle($this->m_multiCurl, $requestCurl);
                if ( $res != 0 )
                {
                    $this->m_hasError = true;
                    $curlError = curl_multi_strerror($res);
                    $this->m_errorMessage = ( is_cstring($curlError) && !CString::isEmpty($curlError) ) ?
                        $curlError : "The 'curl_multi_add_handle' function failed.";
                    $success = false;
                    $timeoutPause->end();
                    $this->finalize();
                    return;
                }

                $numRunningRequests++;
            }

            if ( $numRunningRequests == 0 )
            {
                break;
            }

            // Process the currently added requests until complete or no more data is available. Although
            // `CURLM_CALL_MULTI_PERFORM` is deprecated since libcurl 7.20, keep it for compatibility reasons.
            $numRunningTransfers;
            do
            {
                $multiExecRes = curl_multi_exec($this->m_multiCurl, $numRunningTransfers);
            } while ( $multiExecRes == CURLM_CALL_MULTI_PERFORM );
            if ( $multiExecRes != CURLM_OK )
            {
                $this->m_hasError = true;
                $curlError = curl_multi_strerror($multiExecRes);
                $this->m_errorMessage = ( is_cstring($curlError) && !CString::isEmpty($curlError) ) ? $curlError :
                    "The 'curl_multi_exec' function failed.";
                $success = false;
                $timeoutPause->end();
                $this->finalize();
                return;
            }

            // Check for completed requests, call the callback function for any completed one (if such a function is
            // defined), finalize completed requests, and remove completed requests from the queue.
            while ( true )
            {
                $completedRequestInfo = curl_multi_info_read($this->m_multiCurl);
                if ( !is_cmap($completedRequestInfo) )
                {
                    break;
                }

                // A request has completed.
                assert( '$completedRequestInfo["msg"] == CURLMSG_DONE', vs(isset($this), get_defined_vars()) );
                $requestCurl = $completedRequestInfo["handle"];
                $requestRes = $completedRequestInfo["result"];
                $requestRecordPos;
                $found = CArray::find($this->m_requestRecordsQueue, $requestCurl,
                    function ($requestRecord, $requestCurl)
                    {
                        $request = $requestRecord[0];
                        return ( $request->curl() == $requestCurl );
                    },
                    $requestRecordPos);
                assert( '$found', vs(isset($this), get_defined_vars()) );
                $requestRecord = $this->m_requestRecordsQueue[$requestRecordPos];
                $request = $requestRecord[0];
                $onCompleteCallback = $requestRecord[1];

                // Remove the normal cURL handle from the multi cURL handle.
                $res = curl_multi_remove_handle($this->m_multiCurl, $requestCurl);
                if ( $res != 0 )
                {
                    $this->m_hasError = true;
                    $curlError = curl_multi_strerror($res);
                    $this->m_errorMessage = ( is_cstring($curlError) && !CString::isEmpty($curlError) ) ?
                        $curlError : "The 'curl_multi_remove_handle' function failed.";
                    $success = false;
                    $timeoutPause->end();
                    $this->finalize();
                    return;
                }

                if ( $requestRes == CURLE_OK )
                {
                    // The request has succeeded.

                    if ( isset($onCompleteCallback) )
                    {
                        $response;
                        if ( $request->isReturnTransferSet() )
                        {
                            $response = curl_multi_getcontent($requestCurl);
                            assert( 'is_cstring($response)', vs(isset($this), get_defined_vars()) );
                        }
                        else
                        {
                            $response = "";
                        }
                        $request->onRequestCompleteOk();  // also close the normal cURL handle
                        call_user_func($onCompleteCallback, true, $response, $request, $this);
                    }
                    else
                    {
                        $request->onRequestCompleteOk();  // also close the normal cURL handle
                    }

                    $anySuccessfulRequests = true;
                }
                else
                {
                    // The request has failed.

                    $curlError = curl_strerror($requestRes);
                    if ( !is_cstring($curlError) )
                    {
                        $curlError = "";
                    }
                    $request->onRequestCompleteWithError($curlError);  // also close the normal cURL handle

                    if ( isset($onCompleteCallback) )
                    {
                        call_user_func($onCompleteCallback, false, "", $request, $this);
                    }
                }

                CArray::remove($this->m_requestRecordsQueue, $requestRecordPos);
                $numRunningRequests--;
            }

            assert( '$numRunningRequests == $numRunningTransfers', vs(isset($this), get_defined_vars()) );
            if ( $numRunningTransfers > 0 )
            {
                // Some requests are still being processed (by remote machines). Wait for more data to appear on
                // sockets, without getting hard on the CPU.
                do
                {
                    $multiSelectRes = curl_multi_select($this->m_multiCurl);
                } while ( $multiSelectRes == -1 );
            }
            else
            {
                // No requests are being processed. Check if any requests are pending.
                if ( CArray::isEmpty($this->m_requestRecordsQueue) )
                {
                    // No requests are pending.
                    break;
                }
            }
        }

        // Set the script's execution time limit like the session has never happened.
        $timeoutPause->end();

        if ( !$anySuccessfulRequests )
        {
            $this->m_hasError = true;
            $this->m_errorMessage = "None of the session's requests succeeded.";
            $success = false;
        }

        $this->finalize();
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * @ignore
     */

    public function __destruct ()
    {
        if ( !$this->m_done )
        {
            $this->finalize();
        }
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    protected function finalize ()
    {
        if ( is_resource($this->m_multiCurl) )
        {
            curl_multi_close($this->m_multiCurl);
        }

        if ( isset($this->m_cookiesFp) && CFile::exists($this->m_cookiesFp) )
        {
            CFile::delete($this->m_cookiesFp);
        }

        $this->m_done = true;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    // Properties and defaults.
    protected $m_requestRecordsQueue;
    protected $m_multiCurl;
    protected $m_done = false;
    protected $m_hasError = false;
    protected $m_errorMessage;
    protected $m_cookiesAreEnabled = true;
    protected $m_maxNumConcurrentRequests = 8;
    protected $m_cookiesFp;
}

